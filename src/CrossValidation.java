import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;


public class CrossValidation {
	private int size_of_input, num_of_sets;
	private String OUTPUT_PATH = "C:/Users/Annie/Desktop/School Work/Reverse Engineering/Input Data/";
	private String folder_name; //folder where the input data are
	private String filename;

	public CrossValidation(int input, int sets, String name, String fname) {
		size_of_input = input;
		num_of_sets = sets;
		folder_name = name;
		filename = fname;
	}

	public void doCrossValidation(ReadInstructions read_data) {
		// Make sure to create a folder to store these input files for HMM
		if (!makeDir()){
			System.err.println("Error! Cannot make dir!");
			return;
		}

		// Contains all the input assembly files
		ArrayList<String> data_files = generateDataFiles();
		// Contain the asm file(s) to create alphabet and in file
		ArrayList<String> input_asm_files = new ArrayList<String>();
		int size_per_set = 200/num_of_sets; //size_of_input / num_of_sets; 
		int i;
		
		// The first set is always used for the testing, so it will be 1 file
		for (i = 0; i < size_per_set; i++) {
			try { //System.out.println(i);
				input_asm_files = read_data.readAssemblyFile(data_files.get(i));
				createInputFiles(read_data, input_asm_files, i);
			} catch (IOException e) {
				e.printStackTrace();
			}	
		}
		//System.out.println("end " + size_of_input);
		input_asm_files = new ArrayList<String>();
		// Training file will be using the remaining file
		for (int j = size_per_set; j < size_of_input; j++) {
			try { //System.out.println(j);
				input_asm_files.addAll(read_data.readAssemblyFile(data_files.get(j)));			
			} catch (IOException e) {
				e.printStackTrace();
			}
		} //System.out.println(i);
		createInputFiles(read_data, input_asm_files, i); //this is the training set which is the combination of the remaining files
	}

	/**
	 * 
	 * @param read_data
	 * @param current_file the current assembly file to be convert to alphabet and in files
	 * @param i the index to identify training or testing file (0 - 39: testing, 40 is training)
	 */
	private void createInputFiles(ReadInstructions read_data, ArrayList<String> current_file, int i) {
		// This contains the processed assembly codes from data files
		ArrayList<String> asm_data = new ArrayList<String>();	
		// This contains all the unique symbols for the alphabet file
		ArrayList<String> alphabet_data = new ArrayList<String>();
		// This contains all the index for the opcodes
		ArrayList<Integer> index_data = new ArrayList<Integer>();

		//this is the training file (.in file)
		asm_data.addAll(current_file); 
		//get all the unique symbols
		alphabet_data = read_data.getAlphabet(asm_data);
		// write the alphabet file
		read_data.writeAlphabets(alphabet_data, OUTPUT_PATH + "/" + filename + "/IDAN" + i + ".asm");
		// get the index of all opcodes
		index_data = read_data.getInputFile(asm_data, alphabet_data);
		// write the index into the .in file
		read_data.writeInputFile(index_data, OUTPUT_PATH + "/" + filename + "/IDAN" + i + ".asm");	
	}

	private ArrayList<String> generateDataFiles() {
		// Number prefix of the input assembly files
		int[] file_num = new int[size_of_input];
		// Contains all the input assembly files
		ArrayList<String> data_files = new ArrayList<String>();	

		// perform file permutation for each set
		file_num = performPermutation();
		// add the files in the order that generated by the perm generator
		for (int k = 0; k < size_of_input; k++) {
			data_files.add(folder_name + "/IDAN" + file_num[k] + ".asm");
		}
		return data_files;
	}

	private boolean makeDir() {
		//check to see if the dir exist, if not create it
		File folder = new File(OUTPUT_PATH + filename);
		boolean done = true;
		if (!folder.exists()) {
			done = folder.mkdir();
			return done;
		}
		return done;
	}

	private int[] performPermutation() {
		int j = 0, k; 
		Random rand = new Random();
		// Need a permutation of files for cross-validation
		int[] file_num = new int[size_of_input];
		// initialize the file number in increase order
		for (int i = 0; i < size_of_input; i++) {
			file_num[i] = i;
		}

		// perform permutation
		for (int i = size_of_input - 1; i > 0; i--) {
			j = rand.nextInt(i+1); // random integer between 0 and i
			k = file_num[i];
			file_num[i] = file_num[j];
			file_num[j] = k;
		}
		return file_num;
	}
}
